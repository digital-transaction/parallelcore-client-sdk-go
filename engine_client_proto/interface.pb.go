// Code generated by protoc-gen-go. DO NOT EDIT.
// source: interface.proto

/*
Package engine_client_proto is a generated protocol buffer package.

It is generated from these files:
	interface.proto

It has these top-level messages:
	AuthRequest
	Request
	Response
	IdentifiedResponse
*/
package engine_client_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthRequest struct {
	ClientId   []byte `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Credential []byte `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (m *AuthRequest) Reset()                    { *m = AuthRequest{} }
func (m *AuthRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()               {}
func (*AuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AuthRequest) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *AuthRequest) GetCredential() []byte {
	if m != nil {
		return m.Credential
	}
	return nil
}

type Request struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Response struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Error   []byte `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Response) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

type IdentifiedResponse struct {
	Payload     []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	CommittedId []byte `protobuf:"bytes,2,opt,name=committedId,proto3" json:"committedId,omitempty"`
	Error       []byte `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *IdentifiedResponse) Reset()                    { *m = IdentifiedResponse{} }
func (m *IdentifiedResponse) String() string            { return proto.CompactTextString(m) }
func (*IdentifiedResponse) ProtoMessage()               {}
func (*IdentifiedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *IdentifiedResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *IdentifiedResponse) GetCommittedId() []byte {
	if m != nil {
		return m.CommittedId
	}
	return nil
}

func (m *IdentifiedResponse) GetError() []byte {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthRequest)(nil), "engine_client_proto.AuthRequest")
	proto.RegisterType((*Request)(nil), "engine_client_proto.Request")
	proto.RegisterType((*Response)(nil), "engine_client_proto.Response")
	proto.RegisterType((*IdentifiedResponse)(nil), "engine_client_proto.IdentifiedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RequestHandler service

type RequestHandlerClient interface {
	Invoke(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	IdentifiedInvoke(ctx context.Context, in *Request, opts ...grpc.CallOption) (*IdentifiedResponse, error)
	UserMan(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SysMan(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Renew(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Response, error)
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RegisterEventListener(ctx context.Context, opts ...grpc.CallOption) (RequestHandler_RegisterEventListenerClient, error)
	ManageApiAccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CheckApiAccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RegisterSmartContract(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ListSmartContract(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ListSmartContracts(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GrantAccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RevokeAccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateDomain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ListDomain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ListManagedDomains(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GrantDomainAdmin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RevokeDomainAdmin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	CreateClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UpdateClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ListClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ListClients(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	RemoveClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type requestHandlerClient struct {
	cc *grpc.ClientConn
}

func NewRequestHandlerClient(cc *grpc.ClientConn) RequestHandlerClient {
	return &requestHandlerClient{cc}
}

func (c *requestHandlerClient) Invoke(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/Invoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) IdentifiedInvoke(ctx context.Context, in *Request, opts ...grpc.CallOption) (*IdentifiedResponse, error) {
	out := new(IdentifiedResponse)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/IdentifiedInvoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) UserMan(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/UserMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) SysMan(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/SysMan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) Renew(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/Renew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/Auth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) RegisterEventListener(ctx context.Context, opts ...grpc.CallOption) (RequestHandler_RegisterEventListenerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RequestHandler_serviceDesc.Streams[0], c.cc, "/engine_client_proto.RequestHandler/RegisterEventListener", opts...)
	if err != nil {
		return nil, err
	}
	x := &requestHandlerRegisterEventListenerClient{stream}
	return x, nil
}

type RequestHandler_RegisterEventListenerClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type requestHandlerRegisterEventListenerClient struct {
	grpc.ClientStream
}

func (x *requestHandlerRegisterEventListenerClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *requestHandlerRegisterEventListenerClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *requestHandlerClient) ManageApiAccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/ManageApiAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) CheckApiAccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/CheckApiAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) RegisterSmartContract(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/RegisterSmartContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) ListSmartContract(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/ListSmartContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) ListSmartContracts(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/ListSmartContracts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) GrantAccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/GrantAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) RevokeAccess(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/RevokeAccess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) CreateDomain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/CreateDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) ListDomain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/ListDomain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) ListManagedDomains(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/ListManagedDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) GrantDomainAdmin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/GrantDomainAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) RevokeDomainAdmin(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/RevokeDomainAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) CreateClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/CreateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) UpdateClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/UpdateClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) ListClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/ListClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) ListClients(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/ListClients", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *requestHandlerClient) RemoveClient(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/engine_client_proto.RequestHandler/RemoveClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RequestHandler service

type RequestHandlerServer interface {
	Invoke(context.Context, *Request) (*Response, error)
	IdentifiedInvoke(context.Context, *Request) (*IdentifiedResponse, error)
	UserMan(context.Context, *Request) (*Response, error)
	SysMan(context.Context, *Request) (*Response, error)
	Renew(context.Context, *Request) (*Response, error)
	Auth(context.Context, *AuthRequest) (*Response, error)
	Ping(context.Context, *Request) (*Response, error)
	RegisterEventListener(RequestHandler_RegisterEventListenerServer) error
	ManageApiAccess(context.Context, *Request) (*Response, error)
	CheckApiAccess(context.Context, *Request) (*Response, error)
	RegisterSmartContract(context.Context, *Request) (*Response, error)
	ListSmartContract(context.Context, *Request) (*Response, error)
	ListSmartContracts(context.Context, *Request) (*Response, error)
	GrantAccess(context.Context, *Request) (*Response, error)
	RevokeAccess(context.Context, *Request) (*Response, error)
	CreateDomain(context.Context, *Request) (*Response, error)
	ListDomain(context.Context, *Request) (*Response, error)
	ListManagedDomains(context.Context, *Request) (*Response, error)
	GrantDomainAdmin(context.Context, *Request) (*Response, error)
	RevokeDomainAdmin(context.Context, *Request) (*Response, error)
	CreateClient(context.Context, *Request) (*Response, error)
	UpdateClient(context.Context, *Request) (*Response, error)
	ListClient(context.Context, *Request) (*Response, error)
	ListClients(context.Context, *Request) (*Response, error)
	RemoveClient(context.Context, *Request) (*Response, error)
}

func RegisterRequestHandlerServer(s *grpc.Server, srv RequestHandlerServer) {
	s.RegisterService(&_RequestHandler_serviceDesc, srv)
}

func _RequestHandler_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).Invoke(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_IdentifiedInvoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).IdentifiedInvoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/IdentifiedInvoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).IdentifiedInvoke(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_UserMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).UserMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/UserMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).UserMan(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_SysMan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).SysMan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/SysMan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).SysMan(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_Renew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).Renew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/Renew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).Renew(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_RegisterEventListener_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RequestHandlerServer).RegisterEventListener(&requestHandlerRegisterEventListenerServer{stream})
}

type RequestHandler_RegisterEventListenerServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type requestHandlerRegisterEventListenerServer struct {
	grpc.ServerStream
}

func (x *requestHandlerRegisterEventListenerServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *requestHandlerRegisterEventListenerServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RequestHandler_ManageApiAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).ManageApiAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/ManageApiAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).ManageApiAccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_CheckApiAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).CheckApiAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/CheckApiAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).CheckApiAccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_RegisterSmartContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).RegisterSmartContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/RegisterSmartContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).RegisterSmartContract(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_ListSmartContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).ListSmartContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/ListSmartContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).ListSmartContract(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_ListSmartContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).ListSmartContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/ListSmartContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).ListSmartContracts(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_GrantAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).GrantAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/GrantAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).GrantAccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_RevokeAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).RevokeAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/RevokeAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).RevokeAccess(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_CreateDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).CreateDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/CreateDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).CreateDomain(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_ListDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).ListDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/ListDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).ListDomain(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_ListManagedDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).ListManagedDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/ListManagedDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).ListManagedDomains(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_GrantDomainAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).GrantDomainAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/GrantDomainAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).GrantDomainAdmin(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_RevokeDomainAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).RevokeDomainAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/RevokeDomainAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).RevokeDomainAdmin(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).CreateClient(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).UpdateClient(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_ListClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).ListClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/ListClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).ListClient(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_ListClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).ListClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/ListClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).ListClients(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RequestHandler_RemoveClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).RemoveClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/engine_client_proto.RequestHandler/RemoveClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).RemoveClient(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequestHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "engine_client_proto.RequestHandler",
	HandlerType: (*RequestHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _RequestHandler_Invoke_Handler,
		},
		{
			MethodName: "IdentifiedInvoke",
			Handler:    _RequestHandler_IdentifiedInvoke_Handler,
		},
		{
			MethodName: "UserMan",
			Handler:    _RequestHandler_UserMan_Handler,
		},
		{
			MethodName: "SysMan",
			Handler:    _RequestHandler_SysMan_Handler,
		},
		{
			MethodName: "Renew",
			Handler:    _RequestHandler_Renew_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _RequestHandler_Auth_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _RequestHandler_Ping_Handler,
		},
		{
			MethodName: "ManageApiAccess",
			Handler:    _RequestHandler_ManageApiAccess_Handler,
		},
		{
			MethodName: "CheckApiAccess",
			Handler:    _RequestHandler_CheckApiAccess_Handler,
		},
		{
			MethodName: "RegisterSmartContract",
			Handler:    _RequestHandler_RegisterSmartContract_Handler,
		},
		{
			MethodName: "ListSmartContract",
			Handler:    _RequestHandler_ListSmartContract_Handler,
		},
		{
			MethodName: "ListSmartContracts",
			Handler:    _RequestHandler_ListSmartContracts_Handler,
		},
		{
			MethodName: "GrantAccess",
			Handler:    _RequestHandler_GrantAccess_Handler,
		},
		{
			MethodName: "RevokeAccess",
			Handler:    _RequestHandler_RevokeAccess_Handler,
		},
		{
			MethodName: "CreateDomain",
			Handler:    _RequestHandler_CreateDomain_Handler,
		},
		{
			MethodName: "ListDomain",
			Handler:    _RequestHandler_ListDomain_Handler,
		},
		{
			MethodName: "ListManagedDomains",
			Handler:    _RequestHandler_ListManagedDomains_Handler,
		},
		{
			MethodName: "GrantDomainAdmin",
			Handler:    _RequestHandler_GrantDomainAdmin_Handler,
		},
		{
			MethodName: "RevokeDomainAdmin",
			Handler:    _RequestHandler_RevokeDomainAdmin_Handler,
		},
		{
			MethodName: "CreateClient",
			Handler:    _RequestHandler_CreateClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _RequestHandler_UpdateClient_Handler,
		},
		{
			MethodName: "ListClient",
			Handler:    _RequestHandler_ListClient_Handler,
		},
		{
			MethodName: "ListClients",
			Handler:    _RequestHandler_ListClients_Handler,
		},
		{
			MethodName: "RemoveClient",
			Handler:    _RequestHandler_RemoveClient_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterEventListener",
			Handler:       _RequestHandler_RegisterEventListener_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "interface.proto",
}

func init() { proto.RegisterFile("interface.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc7, 0x1b, 0x68, 0x93, 0x6a, 0x52, 0x35, 0xad, 0x01, 0x29, 0xaa, 0x00, 0x45, 0xcb, 0x81,
	0x9e, 0x22, 0x04, 0x37, 0x6e, 0x51, 0x28, 0xe9, 0x8a, 0x44, 0x94, 0x8d, 0xca, 0x01, 0x0e, 0x95,
	0xb1, 0x27, 0xa9, 0xd5, 0xec, 0x78, 0xb1, 0xdd, 0xa0, 0xbe, 0x2d, 0x8f, 0x82, 0xf6, 0x23, 0xcd,
	0x4a, 0x4d, 0x45, 0x24, 0xfb, 0xb6, 0xf3, 0xa1, 0xdf, 0xcc, 0xfc, 0x67, 0xbc, 0xd0, 0x51, 0xe4,
	0xd0, 0xcc, 0xb8, 0xc0, 0x7e, 0x66, 0xb4, 0xd3, 0xec, 0x19, 0xd2, 0x5c, 0x11, 0x5e, 0x89, 0x85,
	0x42, 0x72, 0x57, 0x85, 0x33, 0x8a, 0xa1, 0x3d, 0xb8, 0x75, 0xd7, 0x09, 0xfe, 0xbe, 0x45, 0xeb,
	0xd8, 0x09, 0xec, 0x97, 0xe1, 0x58, 0x76, 0x1b, 0xbd, 0xc6, 0xe9, 0x41, 0x72, 0x6f, 0xb3, 0xd7,
	0x00, 0xc2, 0xa0, 0x44, 0x72, 0x8a, 0x2f, 0xba, 0x4f, 0x8a, 0x68, 0xcd, 0x13, 0xbd, 0x81, 0xd6,
	0x0a, 0xd3, 0x85, 0x56, 0xc6, 0xef, 0x16, 0x9a, 0xaf, 0x28, 0x2b, 0x33, 0xfa, 0x08, 0xfb, 0x09,
	0xda, 0x4c, 0x93, 0xc5, 0xc7, 0xb3, 0xd8, 0x73, 0xd8, 0x43, 0x63, 0xb4, 0xa9, 0xaa, 0x94, 0x46,
	0x34, 0x03, 0x16, 0x17, 0xc5, 0x66, 0x0a, 0xe5, 0x16, 0x94, 0x1e, 0xb4, 0x85, 0x4e, 0x53, 0xe5,
	0x1c, 0xca, 0x58, 0x56, 0xac, 0xba, 0x6b, 0x5d, 0xe7, 0x69, 0xad, 0xce, 0xfb, 0xbf, 0x1d, 0x38,
	0xac, 0x26, 0x39, 0xe7, 0x24, 0x17, 0x68, 0xd8, 0x08, 0x9a, 0x31, 0x2d, 0xf5, 0x0d, 0xb2, 0x97,
	0xfd, 0x0d, 0x32, 0xf6, 0xab, 0xf4, 0x93, 0x57, 0x8f, 0x44, 0xcb, 0x5e, 0xa3, 0x1d, 0xf6, 0x13,
	0x8e, 0xd6, 0x33, 0x6c, 0x85, 0x7c, 0xbb, 0x31, 0xfa, 0x50, 0x88, 0x68, 0x87, 0x9d, 0x43, 0xeb,
	0xd2, 0xa2, 0x99, 0x70, 0xf2, 0x6d, 0x73, 0x04, 0xcd, 0xe9, 0x9d, 0x0d, 0x00, 0xfa, 0x0c, 0x7b,
	0x09, 0x12, 0xfe, 0xf1, 0xe5, 0xc4, 0xb0, 0x9b, 0xdf, 0x29, 0xeb, 0x6d, 0x4c, 0xac, 0x9d, 0xf0,
	0xff, 0x51, 0x67, 0xb0, 0x7b, 0xa1, 0x68, 0xee, 0xdb, 0xd1, 0x0f, 0x78, 0x91, 0xe0, 0x5c, 0x59,
	0x87, 0xe6, 0x6c, 0x89, 0xe4, 0xc6, 0xf9, 0x27, 0xa1, 0xf1, 0xe4, 0x9e, 0x36, 0xde, 0x35, 0xd8,
	0x05, 0x74, 0x26, 0x9c, 0xf8, 0x1c, 0x07, 0x99, 0x1a, 0x08, 0x81, 0xd6, 0xfa, 0x76, 0xfb, 0x15,
	0x0e, 0x87, 0xd7, 0x28, 0x6e, 0x82, 0x01, 0xbf, 0xaf, 0xc7, 0x9f, 0xa6, 0xdc, 0xb8, 0xa1, 0x26,
	0x67, 0xb8, 0x70, 0xbe, 0xdc, 0x04, 0x8e, 0x73, 0x25, 0x83, 0x32, 0xa7, 0xc0, 0x1e, 0x30, 0xbd,
	0x05, 0x18, 0x43, 0x7b, 0x64, 0x38, 0xb9, 0x30, 0x72, 0x4e, 0xe0, 0x20, 0xc1, 0xfc, 0x6f, 0x10,
	0x0c, 0x37, 0x34, 0xc8, 0x1d, 0x7e, 0xd2, 0x29, 0x57, 0xde, 0xaf, 0xf8, 0x0b, 0x40, 0x2e, 0x60,
	0x18, 0x58, 0xb5, 0x8d, 0xf2, 0xc0, 0x65, 0xc9, 0xf4, 0x1e, 0xf8, 0x1b, 0x1c, 0x15, 0xdb, 0x28,
	0x71, 0x03, 0x99, 0xfa, 0xf7, 0x99, 0xc0, 0x71, 0xb9, 0x92, 0x80, 0xcc, 0xfb, 0xbd, 0x0c, 0x8b,
	0x84, 0x00, 0xb8, 0xcb, 0x4c, 0x06, 0xc3, 0x55, 0x6b, 0x0e, 0x03, 0x1b, 0x43, 0x7b, 0x0d, 0x0b,
	0xf3, 0x3e, 0x52, 0xbd, 0x0c, 0x33, 0xe9, 0xaf, 0x66, 0xe1, 0xf9, 0xf0, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x8b, 0x87, 0x3a, 0x0c, 0x25, 0x09, 0x00, 0x00,
}
